#!/bin/sh

CURRENT=$(git symbolic-ref -q HEAD || git rev-parse HEAD)
CURRENT=${CURRENT#refs/heads/}

# default settings
explain=false
verbose=true
run=true

# colors
RED="\033[0;31m"
YELLOW="\033[1;33m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"

die() {
  echo "${RED}${@}${NO_COLOR}"
  exit 1
}

warn() {
  echo "${YELLOW}${@}${NO_COLOR}"
}

good() {
  echo "${GREEN}${@}${NO_COLOR}"
}

printUsage() {
  echo "usage: git-open BRANCH"
  echo "Creates a new branch named BRANCH by forking master or, if"
  echo "a branch by that name exists, it checks that branch out."
  echo ""
  echo "Given these branches:"
  echo ""
  echo "  sh-$ git branch"
  echo "  * master"
  echo "    performance"
  echo ""
  echo "Creating a new branch"
  echo ""
  echo "  sh-$ git open test"
  echo "  + git checkout -b test"
  echo "  Switched to a new branch \"test\""
  echo ""
  echo "Switching to an existing branch"
  echo ""
  echo "  sh-$ git open performance"
  echo "  + git checkout performance"
  echo "  Switched to branch \"performance\""
}

for arg in "$@"; do
  case $arg in
    -e | --explain | --dry-run)
      explain=true
      verbose=true
      run=false
      ;;
    -v | --verbose)
      verbose=true
      ;;
    -q | --quiet)
      verbose=false
      ;;
    -h | --help)
      printUsage
      exit 0
      ;;
    -*)
      warn "${YELLOW}$0: unrecognized parameter '$arg'${NO_COLOR}"
      exit 1
      ;;
    *)
      TARGET=$arg
      ;;
  esac
done

GIT=`which git`

git() {
  if [[ "$verbose" == true ]]; then
    echo "+ ${GREEN}git $@${NO_COLOR}"
  fi

  if [[ "$run" == true ]]; then
    eval "$GIT $@"
  fi
}

if [[ "$CURRENT" == "$TARGET" ]]; then
  echo "Already on branch $TARGET"
  exit
fi

if [[ "$CURRENT" != "master" ]]; then
  git checkout master
fi

if [[ "$TARGET" == "master" ]]; then
  exit
fi

if [[ -z "$TARGET" ]]; then
  warn "Please provide a branch name"
  printUsage
  exit 1
fi

$GIT rev-parse "$TARGET" 2>/dev/null >/dev/null &&
  git checkout "$TARGET" ||
  git checkout -b $TARGET

if [[ $? == 0 && $run == true ]]; then
  good "Now working on $TARGET"
elif [[ $run == true ]]; then
  die "Could not start working on $TARGET"
fi
